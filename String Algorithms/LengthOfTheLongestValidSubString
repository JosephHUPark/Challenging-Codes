https://leetcode.com/contest/weekly-contest-354/problems/length-of-the-longest-valid-substring/

class Solution {
public:
    
    set<string> st;
    int mx;
    
    int check(string s, int n){
        for(int j = min(mx, n)-1; j >= 0; j--){
            if(st.find(s.substr(j)) != st.end()) return j;
        }
        return -1;
    }
    
    int longestValidSubstring(string word, vector<string>& forbidden) {
        int n = word.length();
        
        st.clear();
        mx = 0;
        for(auto p : forbidden){
            st.insert(p);
            mx = max(mx, (int)p.length());
        }
        
        int ans = 0;
        string s;
        int i = 0, prev = 0;
        while(i < n){
            s = word.substr(prev, i-prev);
            int p = -1;
            while(i < n && p == -1){
                s += word[i];
                i++;
                if(i-prev > mx) s.erase(s.begin());
                p = check(s, s.length());
                // cout << s << endl;
            }
            // cout << prev << "\t" << i << endl;
            
            if(p == -1) ans = max(ans, i-prev);
            else ans = max(ans, i-prev-1);
            
            prev = i-(s.length()-p)+1;
        }
        
        return ans;
    }
};
